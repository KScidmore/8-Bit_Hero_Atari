Useful Sections 
==========
- section 1 (introduction)                        page 1
- section 2 (overview of functions)             pages 2-4
    - mainly subsections 2-1 to 2-3
- section 3 (description of operation)          pages 13-14, 16-18, 23
    - mainly subsections 3-1, 3-3, 3-4 and 3-8
    - ignore the I/O ports described in 3-3
- start of section 4 (interface)                first half of page 24
- For later, also note the immense usefulness of section 5 (page 31) and 6 (page 34)


things to remember
    - each function must check its input parameters to make sure they are in range, ignore requests if they are not 
    - 


questions to brainstorm with kyle:
    - why are the specs the way they are? I'm casting stuff but idk if we need to or what to do there 
    - 


void lab5code()
{
	volatile UINT8 *PSG_reg_select = 0xFFFF8800;
	volatile UINT8 *PSG_reg_write  = 0xFFFF8802;

	UINT32 old_ssp = Super(0);

	*PSG_reg_select = 0;		/* set channel A fine tune = 248 */
	*PSG_reg_write  = 248;

	*PSG_reg_select = 1;		/* set channel A coarse tune = 0 */
	*PSG_reg_write  = 0;

	*PSG_reg_select = 7;		/* enable channel A on mixer */
	*PSG_reg_write  = 0x3E;

	*PSG_reg_select = 8;		/* set channel A volume = 11 */
	*PSG_reg_write  = 11;

	while (!Cconis())		/* tone now playing, await key */
		;

	*PSG_reg_select = 8;		/* set channel A volume = 0 */
	*PSG_reg_write  = 0;

	Cnecin();
	Super(old_ssp);
}


    if (channel >= 0 && channel <= 2 && tuning >= 0 && tuning <= 4095)
    {
        UINT16 fine = 0;
        UINT8 rough = 0;

        fine = (UINT16)(tuning & 0xFF)
        rough = (UINT8)(tuning >>)

    }

    if (tuning < 0 || tuning > 0xFFF) {
        return; 
    }

    int fineTuneRegister = channel * 2;
    int coarseTuneRegister = fineTuneRegister + 1;


    UINT8 fineTuneValue = ((UINT8)tuning & 0xFF); 
    UINT8 coarseTuneValue = ((UINT8)(tuning >> 8) & 0x0F); 

    write_psg(fineTuneRegister, fineTuneValue);
    write_psg(coarseTuneRegister, coarseTuneValue);