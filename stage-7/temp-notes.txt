Useful Sections 
==========
- section 1 (introduction)                        page 1
- section 2 (overview of functions)             pages 2-4
    - mainly subsections 2-1 to 2-3
- section 3 (description of operation)          pages 13-14, 16-18, 23
    - mainly subsections 3-1, 3-3, 3-4 and 3-8
    - ignore the I/O ports described in 3-3
- start of section 4 (interface)                first half of page 24
- For later, also note the immense usefulness of section 5 (page 31) and 6 (page 34)


things to remember
    - each function must check its input parameters to make sure they are in range, ignore requests if they are not 
    - 


questions to brainstorm with kyle:
    - can't seem to figure out read_psg() or the envelope function 


Name:           selected song
Description:    main song, plays throughout         

Name:           wrong note played
Description:    "bzzzzz"

Name:           note not played at all
Description:    "tik"         

Name:           game over win 
Description:    little arpeggio, like guitar solo         

Name:           game over lose 
Description:    "dun dun dunnnn"        

Name:           menu selection
Description:    "buh-ding" (note-jump)        
      
----------------------------------------------------------------------

- music stuff 

- one measure/bar is v-line to v-line 
|===========|===========|

- one measure/bar can fit:
    - 1 whole note 
    - 2 half notes 
    - 4 quarter notes 
    - 8 eighth notes 

initialize model
render model's first frame
play_music();
set quit = false

repeat until quit
    if input is pending 
        process asynchronous event 
    if clock has ticked 
        process sync events 
        render model's next frame 
        update_music();



----------------------------------------------------------------------

void do_vbl_isr() {
    /*
    - math is very slightly off to avoid floats or weird logic
    - shouldn't affect timing, miniscule difference 
    */
    static UINT32 vbl_counter = 0;
    static UINT32 measure_counter = 0;
    static UINT32 w_beat_counter = 0;
    static UINT32 h_beat_counter = 0;
    static UINT32 q_beat_counter = 0;

    vbl_counter += 1;

    /*-------- measures ------------------------*/
    if (measure_counter == 210) 
    {
        measures += 1;
        measure_counter = 0;
    }

    /*-------- whole beats ---------------------*/
    if (w_beat_counter == 52 || w_beat_counter == 105 || w_beat_counter == 157) 
    {
        w_beats += 1;
    }
    else if (w_beat_counter == 210) {
        w_beats = 1;
        w_beat_counter = 0;
    }

    /*-------- half beats ----------------------*/
    if (h_beat_counter == 26 || h_beat_counter == 52 || h_beat_counter == 78 || 
        h_beat_counter == 105 || h_beat_counter == 131 || h_beat_counter == 157 || 
        h_beat_counter == 183) 
    {
        h_beats += 1;
    }
    else if (h_beat_counter == 210) {
        h_beats = 1;
        h_beat_counter = 0;
    }


    /*-------- quarter beats -------------------*/
    if (q_beat_counter == 13 || q_beat_counter == 26 || q_beat_counter == 39 || 
        q_beat_counter == 52 || q_beat_counter == 65 || q_beat_counter == 78 || 
        q_beat_counter == 91 || q_beat_counter == 105 || q_beat_counter == 118 || 
        q_beat_counter == 131 || q_beat_counter == 144 || q_beat_counter == 157 || 
        q_beat_counter == 170 || q_beat_counter == 183 || q_beat_counter == 196 )
    {
        q_beats += 1;
    }
    else if (q_beat_counter == 210) {
        q_beats = 1;
        q_beat_counter = 0;
    }

}


-----------------------------------------------------------


    /*
    start_music();
    */
    
    /*
    while (measures <= 4) {
        //prints past 4 w/o second if condition
        if ((w_beats != old_w_beats || h_beats != old_h_beats ||
            q_beats != old_q_beats) && measures <= 4) {
            printf("Measure:\t\t%u\n", measures);
            printf("Whole Beats:\t%u\n", w_beats);
            printf("Half Beats:\t\t%u\n", h_beats);
            printf("Quarter Beats:\t%u\n\n", q_beats);
            old_w_beats = w_beats;
            old_h_beats = h_beats;
            old_q_beats = q_beats;
        }
    }
    */